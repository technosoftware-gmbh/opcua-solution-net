<?xml version="1.0" encoding="utf-8"?>
<ApplicationConfiguration
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:ua="http://opcfoundation.org/UA/2008/02/Types.xsd"
  xmlns="http://opcfoundation.org/UA/SDK/Configuration.xsd"
>
  <!-- A human readable but not necessarily unique name for the application instance -->
  <ApplicationName>SampleCompany OPC UA Sample Server</ApplicationName>

  <!-- A globally unique identifier for the application instance.
       This is overridden with the value contained in the application certificate. -->
  <ApplicationUri>urn:localhost:SampleCompany:SampleServer</ApplicationUri>

  <!-- A globally unique URI for the product (usually assigned by the product vendor) -->
  <ProductUri>uri:samplecompany.com:SampleServer</ProductUri>

  <!-- Indicates the type of application (Server_0, Client_1, ClientAndServer_2 or DiscoveryServer_3). -->
  <ApplicationType>Server_0</ApplicationType>
  <!-- Specifies security related configuration information -->
  <SecurityConfiguration>

    <!-- Where the application instance certificate is stored (MachineDefault) -->
    <ApplicationCertificate>

      <!-- The type of store. -->
      <StoreType>Directory</StoreType>

      <!-- The location of the store. 
           Windows store must start with LocalMachine, CurrentUser or CurrentService
           The name of the store is appended.
           Note that the names used in code are difference from what appears in the control panel.
           e.g. My == "Personal", Root == "Trusted Root Certification Authorities" -->
      <StorePath>%LocalApplicationData%/OPC Foundation/pki/own</StorePath>

      <!-- The subject for the certificate 
           Note that subject names are complex structures. Only text that appears here is treated as the CommonName component.
           The first certificate found is used if multiple certificates with the same CommonName and a matching hostname exist.
           Also a complete distinguished name can be specified here: 'CN=SampleCompany OPC UA Sample Server, DC=localhost'.
           In this case the first certificate matching the complete distinguished name is used. localhost is replaced with the hostname.
           If no certificate is found, a new self signed application certificate is created.
           The Thumbprint should be specified if the CN or DN does not uniquely identify a certificate. -->
      <SubjectName>CN=SampleCompany OPC UA Sample Server, C=CH, S=Aargau, O=SampleCompany, DC=localhost</SubjectName>

      <!-- The SHA1 thumbprint for the certificate.
           The thumbprint uniquely identifies a certificate.
           It should be specified in this file, however, the samples rely on quick and 
           dirty scripts to create new certificate on each machine. A commercial application 
           would generate the initial certificate itself and update the thumbprint accordingly -->
      <!--<Thumbprint>3a35fb798fc6dee8a7e7e4652b0e28fc14c6ee0f</Thumbprint>-->

    </ApplicationCertificate>

    <!-- Where the issuer certificate are stored (certificate authorities) 
    
         Typical web browsing applications trust any certificate issued by a CA in the 
         "Trusted Root Certification Authorities" certificate store. However, this approach is 
         not appropriate for UA because Administrators have no control over the CAs that get
         placed in that Root store to facilitate web browsing. This means Administrators must
         specify a different store that is used only for UA related CAs and/or they must explicitly
         specify the certificate for each trusted certification authority. -->
    <TrustedIssuerCertificates>
      <StoreType>Directory</StoreType>
      <StorePath>%LocalApplicationData%/OPC Foundation/pki/issuer</StorePath>
    </TrustedIssuerCertificates>

    <!-- Where the trust list is stored (UA Applications)
    
         Some UA applications will use self-signed certificates (certificates without a CA)
         which means that every application which communicates with it must be configured to 
         trust it.
         
         Administrators may designate a certificate store that contains trusted UA application
         instance certificates (this store should not be the same as the store used for CAs 
         certificates). Alternately, Administrators may enter the certificates explicitly in
         this list.
         
         Note that entries in this list may either reference a certificate in the store or
         may contained the entire certificate encoded as base64 data.
         -->
    <TrustedPeerCertificates>
      <StoreType>Directory</StoreType>
      <StorePath>%LocalApplicationData%/OPC Foundation/pki/trusted</StorePath>
    </TrustedPeerCertificates>

    <!-- The directory used to store invalid certificates for later review by the administrator. -->
    <RejectedCertificateStore>
      <StoreType>Directory</StoreType>
      <StorePath>%LocalApplicationData%/OPC Foundation/pki/rejected</StorePath>
    </RejectedCertificateStore>

    <!-- WARNING: The following setting (to automatically accept untrusted certificates) should be used
    for easy debugging purposes ONLY and turned off for production deployments! -->
    <AutoAcceptUntrustedCertificates>false</AutoAcceptUntrustedCertificates>

    <!-- WARNING: SHA1 signed certificates are by default rejected and should be phased out. 
    The setting below to allow them is only required for UACTT (1.02.336.244) which uses SHA-1 signed certs. -->
    <RejectSHA1SignedCertificates>true</RejectSHA1SignedCertificates>

    <!-- Value indicating whether certificates with unavailable revocation lists are not accepted -->
    <RejectUnknownRevocationStatus>true</RejectUnknownRevocationStatus>

    <!-- Value indicating which minimum certificate key strength is accepted -->
    <MinimumCertificateKeySize>2048</MinimumCertificateKeySize>

    <!-- Value indicating whether the application cert should be copied to the trusted store -->
    <AddAppCertToTrustedStore>false</AddAppCertToTrustedStore>

    <!-- Specifies whether the complete certificate chain should be sent for CA signed certificates. -->
    <SendCertificateChain>true</SendCertificateChain>

    <!-- Where the User issuer certificates are stored -->
    <UserIssuerCertificates>
      <StoreType>Directory</StoreType>
      <StorePath>%LocalApplicationData%/OPC Foundation/pki/issuerUser</StorePath>
    </UserIssuerCertificates>

    <!-- Where the User trust list is stored-->
    <TrustedUserCertificates>
      <StoreType>Directory</StoreType>
      <StorePath>%LocalApplicationData%/OPC Foundation/pki/trustedUser</StorePath>
    </TrustedUserCertificates>
  </SecurityConfiguration>
  <!-- Maps different transports onto a .NET implementation of a WCF Binding
       WCF bindings are very complex and have many parameters that can be tweaked. To ensure
       interoperability the SDK has defined 3 standard bindings which can be selected with this
       element. Developers may define their own Bindings as well provided the inherit from the 
       Opc.Ua.Binding.BaseBinding type and implement the same constructor as the built-in binding
       provide.
       Note protocols other than HTTP or UA-TCP are not considered to be interoperable -->
  <TransportConfigurations>
  </TransportConfigurations>

  <!-- Specifies quotas used to by the transport layer -->
  <TransportQuotas>

    <!-- The default timeout in milliseconds for operations (used by clients) -->
    <OperationTimeout>120000</OperationTimeout>

    <!-- The maximum length for a string value in any message -->
    <MaxStringLength>1048576</MaxStringLength>

    <!-- The maximum length for a byte string value in any message -->
    <MaxByteStringLength>1048576</MaxByteStringLength>

    <!-- The maximum length for any array in a message. 
         Note that some protocols do not distinguish between bytes and arrays. 
         In these cases the binding will choose the larger of 
         MaxByteStringLength or MaxArrayLength-->
    <MaxArrayLength>65535</MaxArrayLength>

    <!-- The maximum size of any message -->
    <MaxMessageSize>4194304</MaxMessageSize>

    <!-- The maximum buffer size 
         This value controls how big a block of memory the transport layer allocates.
         Setting this value to a large value will reduce performance and use a lot of RAM -->
    <MaxBufferSize>65535</MaxBufferSize>

    <!-- The lifetime of a SecureChannel in milliseconds.
         This specifies how long the server will keep a broken channel around while waiting 
         for a client to reconnect.
         Not used by HTTP or .NET TCP bindings -->
    <ChannelLifetime>300000</ChannelLifetime>

    <!-- The lifetime of a SecurityToken in milliseconds.
         This specifies how long a security token can be used without renewal. -->
    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>
  </TransportQuotas>

  <!-- This element only needs to be specified for Server or ClientServer applications -->
  <ServerConfiguration>

    <!-- The set of addresses. One for each supported protocol.    
         Note that "localhost" is replace with the hostname when the configuration is loaded.
         Additional URLs are created by appending strings to the base address.
         For example, a URL used for an endpoint which uses the Basic256 security policy would look like this:
         https://localhost:55556/SampleServer/Basic256 -->
    <BaseAddresses>
      <ua:String>opc.tcp://localhost:62555/SampleServer</ua:String>
      <ua:String>https://localhost:62556/SampleServer</ua:String>
    </BaseAddresses>
    <!-- 
    These list the alternate addresses (via firewalls, multiple NICs etc.) that can be
    used to communicate with the server. The URL used by the client when calling
    FindServers/GetEndpoints or CreateSession will be used to filter the list of
    endpoints returned by checking for alternate base addresses that have a domain
    that matches the domain in the url provided by the client.
    
    Note that any additional domains should be listed in the server's certificate. If they
    are left out the client make refuse to connect because it has no way to know if the 
    alternate domain was authorized by the server administrator.
    -->
    <!--
    <AlternateBaseAddresses>
      <ua:String>http://AlternateHostName/SampleServer</ua:String>
      <ua:String>http://10.10.103.150/SampleServer</ua:String>
      <ua:String>http://[2a01::626d]/SampleServer</ua:String>
    </AlternateBaseAddresses>
    -->
    <SecurityPolicies>
      <ServerSecurityPolicy>
        <SecurityMode>SignAndEncrypt_3</SecurityMode>
        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>
      </ServerSecurityPolicy>
      <ServerSecurityPolicy>
        <SecurityMode>None_1</SecurityMode>
        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>
      </ServerSecurityPolicy>
      <ServerSecurityPolicy>
        <SecurityMode>Sign_2</SecurityMode>
        <SecurityPolicyUri></SecurityPolicyUri>
      </ServerSecurityPolicy>
      <ServerSecurityPolicy>
        <SecurityMode>SignAndEncrypt_3</SecurityMode>
        <SecurityPolicyUri></SecurityPolicyUri>
      </ServerSecurityPolicy>
      <!-- deprecated security policies for reference only
      <ServerSecurityPolicy>
        <SecurityMode>Sign_2</SecurityMode>
        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>
      </ServerSecurityPolicy>
      <ServerSecurityPolicy>
        <SecurityMode>SignAndEncrypt_3</SecurityMode>
        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>
      </ServerSecurityPolicy>
      <ServerSecurityPolicy>
        <SecurityMode>Sign_2</SecurityMode>
        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>
      </ServerSecurityPolicy>
      <ServerSecurityPolicy>
        <SecurityMode>SignAndEncrypt_3</SecurityMode>
        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>
      </ServerSecurityPolicy>
      -->
    </SecurityPolicies>

    <!-- Minimum number of threads assigned to processing requests -->
    <MinRequestThreadCount>5</MinRequestThreadCount>

    <!-- Maximum number of threads assigned to processing requests -->
    <MaxRequestThreadCount>100</MaxRequestThreadCount>

    <!-- Maximum number of requests that will be queued waiting for a thread -->
    <MaxQueuedRequestCount>2000</MaxQueuedRequestCount>

    <!-- The SDK expects the server to support the same set of user tokens for every endpoint. -->
    <UserTokenPolicies>
      <!-- Allows anonymous users -->
      <ua:UserTokenPolicy>
        <ua:TokenType>Anonymous_0</ua:TokenType>
        <!-- <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</ua:SecurityPolicyUri> -->
      </ua:UserTokenPolicy>

      <!-- Allows username/password -->
      <ua:UserTokenPolicy>
        <ua:TokenType>UserName_1</ua:TokenType>
        <!-- passwords must be encrypted - this specifies what algorithm to use -->
        <!-- if no algorithm is specified, the active security policy is used -->
        <!-- <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</ua:SecurityPolicyUri> -->
      </ua:UserTokenPolicy>

      <!-- Allows user certificates -->
      <ua:UserTokenPolicy>
        <ua:TokenType>Certificate_2</ua:TokenType>
        <!-- certificate possession must be proven with a digital signature - this specifies what algorithm to use -->
        <!-- if no algorithm is specified, the active security policy is used -->
        <!-- <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</ua:SecurityPolicyUri> -->
      </ua:UserTokenPolicy>
    </UserTokenPolicies>

    <!-- Whether the server updates its diagnostic information -->
    <DiagnosticsEnabled>true</DiagnosticsEnabled>
    <!-- The maximum number of simultaneous sessions -->
    <MaxSessionCount>75</MaxSessionCount>

    <!-- The minimum session lifetime permitted by the server -->
    <MinSessionTimeout>10000</MinSessionTimeout>

    <!-- The maximum session lifetime permitted by the server -->
    <MaxSessionTimeout>3600000</MaxSessionTimeout>

    <!-- The maximum number of browse continuation points per session -->
    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>

    <!-- The maximum number of query continuation points per session -->
    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>

    <!-- The maximum number of history continuation points per session -->
    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>

    <!-- The maximum age of an incoming request -->
    <MaxRequestAge>600000</MaxRequestAge>

    <!-- The minimum allowed publishing interval (in milliseconds) -->
    <MinPublishingInterval>50</MinPublishingInterval>

    <!-- The maximum allowed publishing interval (in milliseconds) -->
    <MaxPublishingInterval>3600000</MaxPublishingInterval>

    <!-- The publishing resolution. Requested publishing intervals are rounded up to the next multiple of this value.-->
    <PublishingResolution>50</PublishingResolution>

    <!-- The maximum subscription lifetime.
         This controls the maximum how long the subscriptions will remain open without a publish from the client.-->
    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>

    <!-- The maximum number of sent messages kept in the queue for each subscription-->
    <MaxMessageQueueSize>100</MaxMessageQueueSize>

    <!-- The maximum number of notifications kept in the queue for each monitored item-->
    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>

    <!-- The maximum number of notifications in a single publish response -->
    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>

    <!-- The minimum sampling rate for rarely changing metadata information (such as the server status) -->
    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>

    <!-- The set of supported sampling rates -->
    <AvailableSamplingRates>
      <SamplingRateGroup>
        <Start>5</Start>
        <Increment>5</Increment>
        <Count>20</Count>
      </SamplingRateGroup>
      <SamplingRateGroup>
        <Start>100</Start>
        <Increment>100</Increment>
        <Count>4</Count>
      </SamplingRateGroup>
      <SamplingRateGroup>
        <Start>500</Start>
        <Increment>250</Increment>
        <Count>2</Count>
      </SamplingRateGroup>
      <SamplingRateGroup>
        <Start>1000</Start>
        <Increment>500</Increment>
        <Count>20</Count>
      </SamplingRateGroup>
    </AvailableSamplingRates>

    <!-- The endpoint description for the registration endpoint. -->
    <RegistrationEndpoint>
      <ua:EndpointUrl>opc.tcp://localhost:4840</ua:EndpointUrl>
      <ua:Server>
        <ua:ApplicationUri>opc.tcp://localhost:4840</ua:ApplicationUri>
        <ua:ApplicationType>DiscoveryServer_3</ua:ApplicationType>
        <ua:DiscoveryUrls>
          <ua:String>opc.tcp://localhost:4840</ua:String>
        </ua:DiscoveryUrls>
      </ua:Server>
      <ua:SecurityMode>SignAndEncrypt_3</ua:SecurityMode>
      <ua:SecurityPolicyUri />
      <ua:UserIdentityTokens />
    </RegistrationEndpoint>

    <!-- The maximum interval between registration. 0 disables periodic registration -->
    <MaxRegistrationInterval>0</MaxRegistrationInterval>

    <!-- The file used to save nodes added to the CoreNodeManager. If missing the CoreNodeManger will discard nodes when it stops. -->
    <NodeManagerSaveFile>SampleCompany.SampleServer.Nodes.xml</NodeManagerSaveFile>

    <!-- The minimum lifetime for a subscription. -->
    <MinSubscriptionLifetime>10000</MinSubscriptionLifetime>

    <!-- The max publish request count. -->
    <MaxPublishRequestCount>20</MaxPublishRequestCount>

    <!-- The max subscription count. -->
    <MaxSubscriptionCount>100</MaxSubscriptionCount>

    <!-- The max size of the event queue. -->
    <MaxEventQueueSize>10000</MaxEventQueueSize>

    <!-- see https://opcfoundation-onlineapplications.org/profilereporting/ for list of available profiles -->
    <ServerProfileArray>
      <ua:String>http://opcfoundation.org/UA-Profile/Server/StandardUA2017</ua:String>
      <ua:String>http://opcfoundation.org/UA-Profile/Server/DataAccess</ua:String>
      <ua:String>http://opcfoundation.org/UA-Profile/Server/Methods</ua:String>
      <ua:String>http://opcfoundation.org/UA-Profile/Server/ReverseConnect</ua:String>
    <ua:String>http://opcfoundation.org/UA-Profile/Server/ClientRedundancy</ua:String>
    </ServerProfileArray>
    <ShutdownDelay>5</ShutdownDelay>
    <ServerCapabilities>
      <ua:String>DA</ua:String>
    </ServerCapabilities>
    <SupportedPrivateKeyFormats>
      <ua:String>PFX</ua:String>
      <ua:String>PEM</ua:String>
    </SupportedPrivateKeyFormats>
    <MaxTrustListSize>0</MaxTrustListSize>
    <MultiCastDnsEnabled>false</MultiCastDnsEnabled>

    
<!--  Reverse connection parameters sample -->
    <!--
    <ReverseConnect>
      <Clients>
        <ReverseConnectClient>
          <EndpointUrl>opc.tcp://localhost:65300</EndpointUrl>
          <MaxSessionCount>0</MaxSessionCount>
          <Enabled>true</Enabled>
        </ReverseConnectClient>
      </Clients>
      <ConnectInterval>15000</ConnectInterval>
      <ConnectTimeout>30000</ConnectTimeout>
      <RejectTimeout>60000</RejectTimeout>
    </ReverseConnect>
    -->

    <OperationLimits>
      <MaxNodesPerRead>2500</MaxNodesPerRead>
      <MaxNodesPerHistoryReadData>1000</MaxNodesPerHistoryReadData>
      <MaxNodesPerHistoryReadEvents>1000</MaxNodesPerHistoryReadEvents>
      <MaxNodesPerWrite>2500</MaxNodesPerWrite>
      <MaxNodesPerHistoryUpdateData>1000</MaxNodesPerHistoryUpdateData>
      <MaxNodesPerHistoryUpdateEvents>1000</MaxNodesPerHistoryUpdateEvents>
      <MaxNodesPerMethodCall>2500</MaxNodesPerMethodCall>
      <MaxNodesPerBrowse>2500</MaxNodesPerBrowse>
      <MaxNodesPerRegisterNodes>2500</MaxNodesPerRegisterNodes>
      <MaxNodesPerTranslateBrowsePathsToNodeIds>2500</MaxNodesPerTranslateBrowsePathsToNodeIds>
      <MaxNodesPerNodeManagement>2500</MaxNodesPerNodeManagement>
      <MaxMonitoredItemsPerCall>2500</MaxMonitoredItemsPerCall>
    </OperationLimits>
    <AuditingEnabled>true</AuditingEnabled>
  </ServerConfiguration>

  <Extensions></Extensions>


  <!--
  Masks supported by the trace feature. 
  Servers will detect changes within 5 seconds.
  
  Do not output any messages.
  None = 0x0;

  Output error messages.
  Error = 0x1;

  Output informational messages.
  Information = 0x2;

  Output stack traces.
  StackTrace = 0x4;

  Output basic messages for service calls.
  Service = 0x8;

  Output detailed messages for service calls.
  ServiceDetail = 0x10;

  Output basic messages for each operation.
  Operation = 0x20;

  Output detailed messages for each operation.
  OperationDetail = 0x40;

  Output messages related to application initialization or shutdown
  StartStop = 0x80;

  Output messages related to a call to an external system.
  ExternalSystem = 0x100;

  Output messages related to security
  Security = 0x200;
  
  All above
  AllAbove = 0x3FF;
  -->
  <TraceConfiguration>
    <OutputFilePath>./Logs/SampleCompany.SampleServer.log</OutputFilePath>
    <DeleteOnLoad>true</DeleteOnLoad>
    <!-- Show Only Errors -->
    <!-- <TraceMasks>1</TraceMasks> -->
    <!-- Show Only Security and Errors -->
    <!-- <TraceMasks>513</TraceMasks> -->
    <!-- Show Only Security, Errors and Trace -->
    <!-- <TraceMasks>515</TraceMasks> -->
    <!-- Show Only Security, COM Calls, Errors and Trace -->
    <!-- <TraceMasks>771</TraceMasks> -->
    <!-- Show Only Security, Service Calls, Errors and Trace -->
    <!-- <TraceMasks>523</TraceMasks> -->
    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->
    <TraceMasks>519</TraceMasks>
    <!-- Show Error, Information, StackTrace, Service, ServiceDetail, Operation, OperationDetail, StartStop, ExternalSystem and Security. -->
    <!-- <TraceMasks>1023</TraceMasks> -->
  </TraceConfiguration>

</ApplicationConfiguration>